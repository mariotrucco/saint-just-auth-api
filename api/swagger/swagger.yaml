swagger: "2.0"
info:
  version: "0.0.1"
  title: Saint-Just Auth API

host: localhost:10010
 
basePath: /
 
schemes:
  - http
  - https

consumes:
  - application/json
produces:
  - application/json

paths:

  /login:
    x-swagger-router-controller: login
    post:
      description: |
        Login with username and password
      operationId: login-by-credentials
      parameters:
        - name: user
          in: body
          description: Credentials object
          required: true
          schema:
            $ref: '#/definitions/Credentials'
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/SuccessResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
      
  
  /users/me:
    x-swagger-router-controller: users
    get:
      description: |
        Get the current user
      operationId: get-current
      parameters:
        - name: x-access-token
          in: header
          description: Auth token
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
            
  /users/{id}:
    x-swagger-router-controller: users
    get:
      description: |
        Get a user by their id
      operationId: get-by-id
      parameters:
        - name: id  
          in: path
          description: Id of the requested user
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
            
  /users:
    x-swagger-router-controller: users
    post:
      description: |
        Register a new user.
      operationId: register
      parameters:
        - name: user
          in: body
          description: user object, including username and password
          required: true
          schema:
            $ref: '#/definitions/UserWithCredentials'
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/SuccessResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swagger:
    x-swagger-pipe: swagger_raw

definitions:
  
  Username:
    description: |
      The most basic object to possibly represent a user, only contains the user's username
    required:
    - username
    properties:
      username:
        type: string
        description: the user's username 

  Credentials:
    description: |
      Contains the user's username and password for login
    allOf:
    - $ref: '#/definitions/Username'
    - type: object
    required:
    - password
    properties:
      password:
        type: string
        description: the user's password

  BaseUser:
    description: |
      Contains the properties of a user, except for their username and password and verified flag
    required:
    - email
    - country
    - locale
    - timezone
    properties:
      email:
        type: string
        description: The user's email address
      country:
        type: string
        description: Code for the user's country
      locale:
        type: string
        description: Code for the user's locale setting (for translations, date formats and such)
      timezone:
        type: string
        description: Name of the user's timezone setting
        
  User:
    description: |
      Contains the properties of a user, except for their password
      (either because the user does not have one ore because the object is used as a response rather than an input)
    allOf:
      - $ref: '#/definitions/BaseUser'
      - type: object
    required:
    - username
    - verified
    properties:
      username:
        type: string
        description: the user's username
      verified:
        type: boolean
        description: Whether the user is verified (either via email confirmation or external auth providers)
      
  UserWithCredentials:
    description: |
      Contains the properties of a user, with credentials, excepted for the verified flag
      (intended as input for the creation of a new user)
    allOf:
      - $ref: '#/definitions/BaseUser'
      - type: object
    required:
    - username
    - password
    properties:
      username:
        type: string
        description: the user's username    
      password:
        type: string
        description: the user's password
  
  SuccessResponse:
    required:
      - message
    properties:
      message:
        type: string
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
